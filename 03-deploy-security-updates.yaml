---
- name: Deploy security updates on Linux servers
  hosts: all
  become: yes
  vars:
    # Security update configuration
    security_only: yes
    reboot_if_required: no
    reboot_timeout: 600
    enable_auto_updates: yes
    
    # Package manager configurations
    yum_security_plugin: yes
    
  tasks:
    - name: Gather OS facts
      setup:
        filter: ansible_distribution*
      
    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family == "Debian"

    - name: Check if reboot is required (RedHat)
      shell: |
        if [ -f /var/run/reboot-required ] || [ -n "$(needs-restarting -r 2>/dev/null | grep 'Reboot is required')" ]; then
          echo "reboot_required"
        fi
      register: reboot_required_redhat
      changed_when: false
      when: ansible_os_family == "RedHat"

    - name: Set reboot required fact
      set_fact:
        reboot_required: true
      when: 
        - (reboot_required_file.stat.exists | bool) or 
          (reboot_required_redhat.stdout | length > 0)

    - name: Display current package updates available
      package_facts:
        manager: auto
      register: package_facts_result

    - name: Show available updates
      debug:
        msg: "Security updates available: {{ package_facts_result.packages | length }} packages"
      when: package_facts_result is defined

    # Ubuntu/Debian tasks
    - name: Update apt cache (Debian/Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install unattended-upgrades (Debian/Ubuntu)
      apt:
        name: unattended-upgrades
        state: present
      when: 
        - ansible_os_family == "Debian"
        - enable_auto_updates | bool

    - name: Configure automatic security updates (Debian/Ubuntu)
      copy:
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}-security";
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";
          Unattended-Upgrade::MinimalSteps "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "{{ 'true' if reboot_if_required else 'false' }}";
          Unattended-Upgrade::Automatic-Reboot-Time "02:00";
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
      when: 
        - ansible_os_family == "Debian"
        - enable_auto_updates | bool

    - name: Enable automatic updates (Debian/Ubuntu)
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        line: "{{ item }}"
        create: yes
      with_items:
        - 'APT::Periodic::Update-Package-Lists "1";'
        - 'APT::Periodic::Unattended-Upgrade "1";'
        - 'APT::Periodic::Download-Upgradeable-Packages "1";'
      when: 
        - ansible_os_family == "Debian"
        - enable_auto_updates | bool

    - name: Install security updates (Debian/Ubuntu)
      apt:
        name: "*"
        state: latest
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600
        default_release: "{{ ansible_distribution_release }}-security"
      register: debian_updates
      when: 
        - ansible_os_family == "Debian"
        - security_only | bool

    - name: Install all updates (Debian/Ubuntu)
      apt:
        name: "*"
        state: latest
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600
      register: debian_updates
      when: 
        - ansible_os_family == "Debian"
        - not security_only | bool

    # RedHat/CentOS/Rocky tasks
    - name: Install yum-plugin-security (RedHat)
      package:
        name: yum-plugin-security
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution_major_version | int < 8
        - yum_security_plugin | bool

    - name: Install dnf-plugin-security (RedHat 8+)
      package:
        name: dnf-plugin-security
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution_major_version | int >= 8
        - yum_security_plugin | bool

    - name: Install security updates (RedHat - yum)
      yum:
        name: "*"
        state: latest
        security: yes
        update_cache: yes
      register: redhat_updates
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution_major_version | int < 8
        - security_only | bool

    - name: Install security updates (RedHat - dnf)
      dnf:
        name: "*"
        state: latest
        security: yes
        update_cache: yes
      register: redhat_updates
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution_major_version | int >= 8
        - security_only | bool

    - name: Install all updates (RedHat)
      package:
        name: "*"
        state: latest
      register: redhat_updates
      when: 
        - ansible_os_family == "RedHat"
        - not security_only | bool

    # Amazon Linux tasks
    - name: Install security updates (Amazon Linux)
      yum:
        name: "*"
        state: latest
        security: yes
        update_cache: yes
      register: amazon_updates
      when: 
        - ansible_distribution == "Amazon"
        - security_only | bool

    - name: Install all updates (Amazon Linux)
      package:
        name: "*"
        state: latest
      register: amazon_updates
      when: 
        - ansible_distribution == "Amazon"
        - not security_only | bool

    # SUSE tasks
    - name: Install security updates (SUSE)
      zypper:
        name: "*"
        state: latest
        type: patch
        severity: important
      register: suse_updates
      when: 
        - ansible_os_family == "Suse"
        - security_only | bool

    - name: Install all updates (SUSE)
      zypper:
        name: "*"
        state: latest
      register: suse_updates
      when: 
        - ansible_os_family == "Suse"
        - not security_only | bool

    - name: Check if kernel was updated
      shell: |
        if [ "$(uname -r)" != "$(rpm -q kernel --last | head -1 | cut -d' ' -f1 | sed 's/kernel-//')" ]; then
          echo "kernel_updated"
        fi
      register: kernel_updated_check
      changed_when: false
      when: ansible_os_family == "RedHat"

    - name: Check if kernel was updated (Debian)
      shell: |
        if [ "$(uname -r)" != "$(ls -1 /boot/vmlinuz-* | tail -1 | xargs basename | sed 's/vmlinuz-//')" ]; then
          echo "kernel_updated"
        fi
      register: kernel_updated_debian
      changed_when: false
      when: ansible_os_family == "Debian"

    - name: Set kernel updated fact
      set_fact:
        kernel_updated: true
      when: 
        - (kernel_updated_check.stdout | length > 0) or 
          (kernel_updated_debian.stdout | length > 0)

    - name: Display update summary
      debug:
        msg: |
          Security updates applied successfully!
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Reboot required: {{ reboot_required | default(false) | bool }}
          Kernel updated: {{ kernel_updated | default(false) | bool }}

    - name: Reboot system if required and configured
      reboot:
        msg: "Security updates require reboot"
        connect_timeout: 5
        reboot_timeout: "{{ reboot_timeout }}"
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: 
        - reboot_required | default(false) | bool
        - reboot_if_required | bool
        - (kernel_updated | default(false) | bool) or (reboot_required | bool)

  handlers:
    - name: restart services after updates
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - ssh
        - crond
        - rsyslog
      when: debian_updates.changed or redhat_updates.changed or amazon_updates.changed or suse_updates.changed